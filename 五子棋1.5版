#ifdef UNICODE
#undef UNICODE
#endif
#include<stdio.h>
#include<stdlib.h>
#include<easyx.h>
#include<Windows.h>
#include<graphics.h>
enum Menuop
{
	Author,
	Start,
	Qmusic,
	Smusic,
	Stop,
	Home
};
enum Menuop menuState=Home;
struct Resource
{
	IMAGE img_start[2];
}res;
int num = 1, num_piece, which;
int piece[20][20];
void res_init(struct Resource* res)
{
	loadimage(res->img_start + 0, "04.jpg", getwidth(), getwidth());
	loadimage(res->img_start + 1, "02.jpg");
}
int change_piece(int x, int y)
{
	if (piece[x][y] != 0)
		return 0;
	else
		piece[x][y] = num;
	return 1;
}
int check_chess()
{
	if (num_piece == 361)
	{
		return 1;
	}
	return 0;
}
void draw_piece(int x, int y)
{
	if (num == 1)
		setfillcolor(BLACK);
	else
		setfillcolor(WHITE);
	int m = x / 48.5 + 1;
	int n = y / 48.5 + 1;
	if (change_piece(m, n) == 0)
		return;
	else
	{
		fillcircle(48.4164 * m - 24.175, 48.4164 * n - 24.175,20);
		num *= -1;
		num_piece++;
	}
	if (check_chess())
	{
		exit(0);
	}
}
int check_over1(int x, int y)
{
	int c = 0;
	if (piece[x][y] == 0)
	{
		return 0;
	}
	if (x >= 3 && x <= 17)
	{
		for (int m = -2; m <= 2; m++)
		{
			if (piece[x + m][y] != piece[x][y])
				break;
			else
				c++;
			if (c == 5)
				return 1;
		}
		c = 0;
	}
	if (y >= 3 && y <= 17)
	{
		for (int j = y - 2; j <= y + 2; j++)
		{
			if (piece[x][j] != piece[x][y])
				break;
			else
				c++;
			if (c == 5)
				return 1;
		}
		c = 0;
	}
	return 0;
}
int check_over2(int x, int y)
{
	int c = 0;
	if (piece[x][y] == 0)
	{
		return 0;
	}
	for (int m = -2; m <= 2; m++)
	{
		if (piece[x + m][y] != piece[x][y])
			break;
		else
			c++;
		if (c == 5)
			return 1;
	}
	c = 0;
	for (int j = y - 2; j <= y + 2; j++)
	{
		if (piece[x][j] != piece[x][y])
			break;
		else
			c++;
		if (c == 5)
			return 1;
	}
	c = 0;
	for (int m = -2; m <= 2; m++)
	{
		if (piece[x + m][y + m] != piece[x][y])
			break;
		else
			c++;
		if (c == 5)
			return 1;
	}
	c = 0;
	for (int m = -2; m <= 2; m++)
		if (piece[x - m][y + m] != piece[x][y])
			return 0;
	return 1;
}
int check_over()
{
	for (int i = 1; i < 20; i++)
		for (int j = 1; j < 20; j++)
		{
			if (i < 3 || i>17 || j < 3 || j>17)
			{
				if (check_over1(i, j))
					return piece[i][j];
			}
			else
			{
				if (check_over2(i, j))
					return piece[i][j];
			}
		}
	return 0;
}
void initscene()
{
	SetConsoleTitle("五子棋");
	initgraph(920, 920, EX_NOCLOSE);
	res_init(&res);
	putimage(0,0, res.img_start + 1);
}
void playpiece()
{
	MOUSEMSG m;
	while (1)
	{
		m = GetMouseMsg();
		if (m.uMsg == WM_LBUTTONDOWN)
		{
			draw_piece(m.x, m.y);
		}
		if (check_over() == -1)
		{
			printf("游戏结束，胜者为白方");
			exit(0);
		}
		if (check_over() == 1)
		{
			printf("游戏结束，胜者为黑方");
			exit(0);
		}
	}
}
//鼠标是否在矩形区域
bool isInRect(ExMessage* msg, int x, int y, int w, int h)
{
	if (msg->x > x && msg->x<x + w && msg->y>y && msg->y < y + h)
	{
		return true;
	}
	return false;
}
void startupscene()
{
	while (1)
	{
		ExMessage msg;
		while (peekmessage(&msg, EM_MOUSE))
		{
			if (msg.message == WM_LBUTTONDOWN)
			{
				
			}
			setfillcolor(RED);
			if (isInRect(&msg, 140, 280, 325, 130))
			{
				setfillcolor(YELLOW);
			}
		}
	}
}
int main()
{
	initscene();
	startupscene();
	playpiece();
	return 0;
}
